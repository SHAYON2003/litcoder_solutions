STRING ANALYSIS

#include <bits/stdc++.h>
using namespace std;

void stringAnalysis(const string& str){
    double uppercase=0, lowercase=0, digit=0, specialchar=0;
    int n = str.length();
    for(int i=0; i<n; i++)
    {
        if(isdigit(str[i]))
            digit = digit+1;
        else if(str[i] >= 'a' && str[i] <= 'z')
            lowercase = lowercase+1;
        else if(str[i] >= 'A' && str[i] <= 'Z')
            uppercase = uppercase+1;
        else
            specialchar = specialchar+1;
    }
    cout << fixed << setprecision(3);
    cout << (uppercase/n)*100 << "%" << endl;
    cout << (lowercase/n)*100 << "%" << endl;
    cout << (digit/n)*100 << "%" << endl;
    cout << (specialchar/n)*100 << "%" << endl;
}

int main() {
    string str;
    cin >> str;
    stringAnalysis(str);
}


code -2 longest subarray


#include <iostream>
#include <cstdio>
using namespace std;

int findLongestSubarray(int arr[], int n){
    int sum =0;
    int maxSize = -1,startIndex;
    
    for(int i=0;i<n-1;i++){
    sum = (arr[i]==0)?-1:1;
    for(int j=i+1;j<n;j++){
        (arr[j]==0)?(sum+=-1):(sum+=1);
        if(sum==0&&maxSize<j-i+1){
            maxSize = j-i+1;
            startIndex=i;
        }
    }
    }
   
   if(maxSize==-1){
   cout<<"No such subarray";
   }
   else{
   cout<<startIndex+maxSize;
   }
   
   return maxSize;
}

int main() {
   //dynamically taking the input as the size is not given
   int size =100;
   int* arr = (int*)malloc(sizeof(int)*100);
   int input;
   
   //taking input of the array
   for(int i =0;i<100;i++){
   cin>>input;
   arr[i] = input;   
   }
   
   //calling the function
   findLongestSubarray(arr,size);
   return 0;
}




